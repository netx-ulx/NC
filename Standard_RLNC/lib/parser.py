#!/usr/bin/env python
from argparse import ArgumentParser
from generator_scripts import egress_generator
from generator_scripts import ingress_generator
from generator_scripts import generate_commands
from generator_scripts import constants_generator

def parse_args():
    """ Parses the arguments"""
    parser = ArgumentParser()
    parser.add_argument('-c', action="store", dest='lin_comb', default=4, help="This arguments defines the number of linear combinations generated by the switch")
    parser.add_argument('-m', action="store", dest='mul', default=1, help="This arguments defines the type of multiplication. Set 1 for tables multiplicatio. 2 for shift-add multiplication")
    parser.add_argument('-t', action="store", dest='type', default=1, help="Defines the type of the packet. 1 for uncoded packets. 3 for coded packets")
    parser.add_argument('-g', action="store", dest='gen_size', default=4, help="Defines the generation size")
    parser.add_argument('-s', action="store", dest='number_of_symbols', default=2, help="Defines the number of symbols per packet")
    parser.add_argument('-p', action="store", dest='number_of_packets', default=2, help="Defines the number of packets sent by the sender")
    parser.add_argument("-f", action="store", dest="field_size", default=8, help="Defines the size of the finite field. Options are 8 or 16")
    parser.add_argument("-c_flag", action="store", dest="c_flag", default=8, help="Flag that tells if coding is on or off. 0 is off, 1 is on")
    parser.add_argument("-pps", action="store", dest="pps", default=8, help="Sets how many packets are sent per second")
    args = parser.parse_args()
    type = int(args.type)
    gen_size = int(args.gen_size)
    number_of_symbols = int(args.number_of_symbols)
    number_of_packets = int(args.number_of_packets)
    lin_comb = int(args.lin_comb)
    mul = int(args.mul)
    field_size = int(args.field_size)
    c_flag = int(args.c_flag)
    pps = int(args.pps)
    return type, gen_size, number_of_symbols, number_of_packets, lin_comb, mul, field_size, c_flag, pps

def parse_config_file():
    """ Parses the arguments in the config.txt file"""
    parser = ArgumentParser(fromfile_prefix_chars='@')
    parser.add_argument('-m', action="store", dest='mul', default=1, help="This arguments defines the type of multiplication. Set 1 for tables multiplicatio. 2 for shift-add multiplication")
    parser.add_argument('-c', action="store", dest='lin_comb', default=4, help="This arguments defines the number of linear combinations generated by the switch")
    parser.add_argument('-t', action="store", dest='type', default=1, help="Defines the type of the packet")
    parser.add_argument('-g', action="store", dest='gen_size', default=4, help="Defines the generation size")
    parser.add_argument('-s', action="store", dest='number_of_symbols', default=1, help="Defines the number of symbols per packet")
    parser.add_argument('-p', action="store", dest='number_of_packets', default=4, help="Defines the number of packets sent by the sender")
    parser.add_argument("-f", action="store", dest="field_size", default=8, help="Defines the size of the finite field")
    parser.add_argument("-pps", action="store", dest="pps", default=8, help="Sets how many packets are sent per second")
    args = parser.parse_args()
    mul = int(args.mul)
    type = int(args.type)
    number_of_packets = int(args.number_of_packets)
    number_of_symbols = int(args.number_of_symbols)
    gen_size = int(args.gen_size)
    field_size = int(args.field_size)
    pps = int(args.pps)
    return mul, type, gen_size, number_of_symbols, number_of_packets, field_size, pps

def get_sender_args():
    """ Returns the parameters needed for the sender application in the config file """
    _, type, gen_size, number_of_symbols, number_of_packets, field_size, pps = parse_config_file()
    return type, gen_size, number_of_symbols, number_of_packets, field_size, pps

def get_receiver_args():
    """ Returns the parameters needed for the decoder application in the config file """
    mul,_,gen_size, number_of_symbols, number_of_packets, field_size, pps = parse_config_file()
    return mul,gen_size, number_of_symbols, field_size, number_of_packets, pps
