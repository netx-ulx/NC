#!/usr/bin/env python
from argparse import ArgumentParser
from generator_scripts import egress_generator
from generator_scripts import ingress_generator
from generator_scripts import generate_commands
from generator_scripts import constants_generator

def parse_args():
    """ Parses the arguments"""
    parser = ArgumentParser()
    parser.add_argument('-c', action="store", dest='lin_comb', default=4, help="This arguments defines the number of linear combinations generated by the switch")
    parser.add_argument('-m', action="store", dest='mul', default=1, help="This arguments defines the type of multiplication")
    parser.add_argument('-t', action="store", dest='type', default=1, help="Defines the type of the packet")
    parser.add_argument('-g', action="store", dest='gen_size', default=4, help="Defines the generation size")
    parser.add_argument('-s', action="store", dest='number_of_symbols', default=2, help="Defines the number of symbols per packet")
    parser.add_argument('-p', action="store", dest='number_of_packets', default=2, help="Defines the number of packets sent by the sender")
    parser.add_argument("-l", action="store", dest="packet_loss", default=0, help="Defines the number of randomly discarded packets by the receiver")
    parser.add_argument("-f", action="store", dest="field_size", default=8, help="Defines the size of the finite field")
    args = parser.parse_args()
    type = int(args.type)
    gen_size = int(args.gen_size)
    number_of_symbols = int(args.number_of_symbols)
    number_of_packets = int(args.number_of_packets)
    lin_comb = int(args.lin_comb)
    mul = int(args.mul)
    field_size = int(args.field_size)
    packet_loss = int(args.packet_loss)
    return type, gen_size, number_of_symbols, packet_loss, number_of_packets, lin_comb, mul, field_size

def parse_config_file():
    """ Parses the arguments in the config.txt file"""
    parser = ArgumentParser(fromfile_prefix_chars='@')
    parser.add_argument('-c', action="store", dest='lin_comb', default=4, help="This arguments defines the number of linear combinations generated by the switch")
    parser.add_argument('-t', action="store", dest='type', default=1, help="Defines the type of the packet")
    parser.add_argument('-g', action="store", dest='gen_size', default=4, help="Defines the generation size")
    parser.add_argument('-s', action="store", dest='number_of_symbols', default=2, help="Defines the number of symbols per packet")
    parser.add_argument('-p', action="store", dest='number_of_packets', default=2, help="Defines the number of packets sent by the sender")
    parser.add_argument("-l", action="store", dest="packet_loss", default=0, help="Defines the number of randomly discarded packets by the receiver")
    parser.add_argument("-f", action="store", dest="field_size", default=0, help="Defines the number of randomly discarded packets by the receiver")
    args = parser.parse_args()
    packet_loss = int(args.packet_loss)
    type = int(args.type)
    number_of_packets = int(args.number_of_packets)
    number_of_symbols = int(args.number_of_symbols)
    gen_size = int(args.gen_size)
    field_size = int(args.field_size)
    return type, gen_size, number_of_symbols, number_of_packets, field_size, packet_loss

def get_sender_args():
    """ Returns the parameters needed for the sender application in the config file """
    type, gen_size, number_of_symbols, number_of_packets, field_size, _ = parse_config_file()
    return type, gen_size, number_of_symbols, number_of_packets, field_size

def get_decoder_args():
    """ Returns the parameters needed for the decoder application in the config file """
    _,gen_size, number_of_symbols,_,field_size, packet_loss = parse_config_file()
    return gen_size, number_of_symbols, packet_loss, field_size
