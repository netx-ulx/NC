#!/usr/bin/env python
from argparse import ArgumentParser
from generator_scripts import egress_generator
from generator_scripts import ingress_generator
from generator_scripts import generate_commands

def parse_args():
    """ Parses the arguments in the config.txt file"""
    parser = ArgumentParser(fromfile_prefix_chars='@')
    parser.add_argument('-lin_comb', action="store", dest='lin_comb', default=4, help="This arguments defines the number of linear combinations generated by the switch")
    parser.add_argument('-mul', action="store", dest='mul', default=4, help="This arguments defines the type of multiplication")
    parser.add_argument('-type', action="store", dest='type', default=1, help="Defines the type of the packet")
    parser.add_argument('-gen_size', action="store", dest='gen_size', default=4, help="Defines the generation size")
    parser.add_argument('-number_of_symbols', action="store", dest='number_of_symbols', default=2, help="Defines the number of symbols per packet")
    parser.add_argument('-number_of_packets', action="store", dest='number_of_packets', default=2, help="Defines the number of packets sent by the sender")
    parser.add_argument("-packet_loss", action="store", dest="packet_loss", default=0, help="Defines the number of randomly discarded packets by the receiver")
    args = parser.parse_args()
    number_of_symbols = int(args.number_of_symbols)
    gen_size = int(args.gen_size)
    lin_comb = int(args.lin_comb)
    mul = int(args.mul)
    return number_of_symbols, lin_comb, gen_size, mul

def generate_p4_code(gen_size, number_of_symbols, lin_comb, mul):
    """ Generates the P4 code, specifically the ingress and egress pipeline. Also generates the commands.txt file """
    ingress_generator.generateIngress(gen_size,number_of_symbols)
    egress_generator.generateEgress(gen_size,number_of_symbols, mul)
    generate_commands.generateCommands(lin_comb, 2)

def main():
    number_of_symbols, lin_comb, gen_size, mul = parse_args()
    generate_p4_code(gen_size, number_of_symbols, lin_comb, mul)


main()
